events {}

http {
  map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
  }

  # IP blocking map for security - blocks dangerous/private IP ranges
  map $ip $blocked_ip {
    default 0;
    # Loopback addresses
    "~^127\." 1;
    # Private networks (RFC 1918)
    "~^10\." 1;
    "~^192\.168\." 1;
    "~^172\.(1[6-9]|2[0-9]|3[0-1])\." 1;
    # Link-local addresses (RFC 3927)
    "~^169\.254\." 1;
    # Multicast addresses
    "~^224\." 1;
    "~^225\." 1;
    "~^226\." 1;
    "~^227\." 1;
    "~^228\." 1;
    "~^229\." 1;
    "~^230\." 1;
    "~^231\." 1;
    "~^232\." 1;
    "~^233\." 1;
    "~^234\." 1;
    "~^235\." 1;
    "~^236\." 1;
    "~^237\." 1;
    "~^238\." 1;
    "~^239\." 1;
    # Broadcast and reserved ranges
    "~^255\." 1;
    "~^0\." 1;
    # Reserved for future use (Class E)
    "~^24[0-9]\." 1;
    "~^25[0-5]\." 1;
  }

  server {
    listen 8080;

    # Forward WebSocket proxy traffic to the ws proxy on 1338
    # Captures IP:port from URL path
    location ~ ^/service/proxy/u/(.+)$ {
      set $ip_port $1;
      
      # Extract just the IP part (before the colon) for security validation
      if ($ip_port ~ "^([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}):([0-9]+)$") {
        set $ip $1;
        set $port $2;
      }
      
      # If format doesn't match IP:port, return 400
      if ($ip = "") {
        return 400;
      }
      
      # Check if IP is in blocked ranges using the map directive
      if ($blocked_ip) {
        return 403;
      }

      # IP is safe to proxy - strip the /service/proxy/ prefix so wsproxy sees /u/<host:port>
      rewrite ^/service/proxy/(.*)$ /$1 break;

      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection $connection_upgrade;
      proxy_set_header Host $host;
      proxy_set_header X-Forwarded-Host $host;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header Origin $http_origin;
      proxy_set_header Sec-WebSocket-Protocol $http_sec_websocket_protocol;
      proxy_set_header Sec-WebSocket-Extensions $http_sec_websocket_extensions;
      proxy_set_header Sec-WebSocket-Version $http_sec_websocket_version;
      proxy_set_header Sec-WebSocket-Key $http_sec_websocket_key;
      proxy_pass_header Sec-WebSocket-Protocol;
      proxy_read_timeout 60s;
      proxy_send_timeout 60s;
      proxy_buffering off;
      proxy_redirect off;
      proxy_pass http://game:1338;
    }

    # Forward WebSocket proxy traffic to the ws proxy on 1338
    location ~ ^/ws/?$ {
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection $connection_upgrade;
      proxy_set_header Host $host;
      proxy_set_header X-Forwarded-Host $host;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_read_timeout 60s;
      proxy_send_timeout 60s;
      proxy_buffering off;
      proxy_redirect off;
      proxy_pass http://game:1337;
    }

    # Forward all other web traffic to the game server on 1337
    location / {
      proxy_set_header Host $host;
      proxy_set_header X-Forwarded-Host $host;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_pass http://game:1337;
    }
  }
}

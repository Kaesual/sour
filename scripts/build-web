#!/usr/bin/env bash

set -euo pipefail

IMAGE_TAG="sour-emscripten:3.1.8"
PROJECT_ROOT="$(cd "$(dirname "$0")"/.. && pwd)"
EM_CACHE_DIR="$PROJECT_ROOT/.emscripten-cache"

# Allow overriding output dir
GAME_OUTPUT_DIR=${GAME_OUTPUT_DIR:-dist/game}

# Run as the host user to avoid root-owned files; mount a writable EM_CACHE
HOST_UID="$(id -u)"
HOST_GID="$(id -g)"
mkdir -p "$EM_CACHE_DIR"

exec docker run \
  --rm \
  --user "$HOST_UID:$HOST_GID" \
  --env-file "$PROJECT_ROOT/docker/common.env" \
  -e GAME_OUTPUT_DIR="$GAME_OUTPUT_DIR" \
  -v "$PROJECT_ROOT":/workspace \
  -w /workspace/game \
  "$IMAGE_TAG" \
  bash -lc '
    set -e
    source /emsdk/emsdk_env.sh

    echo "[1/2] Building web client..."
    cd /workspace/client
    rm -rf dist
    yarn install
    yarn build
    cp src/index.html src/favicon.ico src/background.png dist/
    mkdir -p dist/game && cp -r ../game/dist/game/* dist/game/

    echo "[2/2] Staging site for Go server..."
    rm -rf /workspace/pkg/server/static/site
    mkdir -p /workspace/pkg/server/static/site
    cp -r dist/* /workspace/pkg/server/static/site/
  '
